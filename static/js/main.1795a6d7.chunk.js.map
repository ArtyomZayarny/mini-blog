{"version":3,"sources":["MiniBlog.module.css","components/Posts/PostItem/PostItem.module.css","components/Posts/PostItem/PostItem.tsx","components/apiClient.js","components/Hooks/useData.tsx","components/Posts/PostsList.tsx","components/AuthorInfo/AuthorInfo.tsx","MiniBlog.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PostItem","props","title","body","onSelect","useState","showBody","setShowBody","className","styles","postItem","onClick","userId","show","none","apiClient","axios","create","baseURL","useData","path","data","setData","fetch","isFetching","setFetching","useEffect","get","then","response","PostList","list","setList","length","map","post","key","id","AuthorInfo","authorId","name","email","phone","authorInfo","setAuthorInfo","MiniBlog","authorID","miniBlog","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,SAAW,6B,2ECA7BD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,yB,kHC2BxCC,EAlB2B,SAACC,GAAW,IAAD,iBACfA,GAA3BC,EAD0C,EAC1CA,MAAMC,EADoC,EACpCA,KAAKC,EAD+B,EAC/BA,SAD+B,EAElBC,oBAAS,GAFS,mBAE1CC,EAF0C,KAEjCC,EAFiC,KAQjD,OACI,wBAAIC,UAAWC,IAAOC,SAAUC,QAAU,WAJ1CJ,GAAaD,GACbF,EAASH,EAAMW,UAIX,4BAAKV,GACL,yBAAKM,UAAYF,EAAWG,IAAOI,KAAOJ,IAAOK,MAC5CX,K,QChBFY,E,OAJGC,EAAMC,OAAO,CAC3BC,QAAS,0CCoBEC,EAdC,SAACC,GAAkB,IAAD,EACPf,mBAAgB,CAACgB,KAAK,KADf,mBACvBA,EADuB,KAClBC,EADkB,OAEGjB,mBAAoB,CAACkB,OAAM,IAF9B,mBAEvBC,EAFuB,KAEZC,EAFY,KAY9B,OARAC,qBAAW,WACPD,EAAY,CAACF,OAAM,IACnBR,EAAUY,IAAIP,GAAMQ,MAAK,SAAAC,GACrBP,EAAQO,EAASR,MACjBI,EAAY,CAACF,OAAM,SAExB,CAACH,IAEG,CAACC,EAAKG,ICiBFM,EAtB0B,SAAC7B,GAAW,IAAD,EACtBkB,EAAQ,UADc,mBACzCE,EADyC,aAEzBhB,mBAAS,KAFgB,mBAEzC0B,EAFyC,KAEpCC,EAFoC,KAOhD,OAHAN,qBAAU,WACNM,EAAQX,KACT,CAACA,IAEA,4BACI,yCACEU,EAAKE,OAAS,GAAKF,EAAKG,KAAK,SAACC,GAC3B,OAAO,kBAAC,EAAD,CACQC,IAAKD,EAAKE,GACVnC,MAAOiC,EAAKjC,MACZC,KAAMgC,EAAKhC,KACXS,OAAQuB,EAAKvB,OACbR,SAAUH,EAAMG,gB,QCIjCkC,EArB8B,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAwB,+BAEzCpB,EAAQ,UAAD,OAAWoB,KAFuB,mBAE5DlB,EAF4D,aAGhChB,mBAAkB,CAACmC,KAAK,GAAGC,MAAM,GAAGC,MAAM,KAHV,mBAG5DC,EAH4D,KAGjDC,EAHiD,KAYnE,OANAlB,qBAAU,WACHL,EAAKgB,IACJO,EAAcvB,KAEnB,CAACA,IAGA,yBAAKb,UAAU,UACX,0CACA,qCAAWmC,EAAWH,MACtB,uCAAaG,EAAWF,OACxB,sCAAYE,EAAWD,S,iBCNpBG,EAhBE,WAAO,IAAD,EACExC,mBAAgB,CACrCyC,SAAS,OAFU,mBACdzB,EADc,KACTC,EADS,KAQrB,OACE,yBAAKd,UAAWC,IAAOsC,UACrB,kBAAC,EAAD,CAAU3C,SALO,SAACiC,GAClBf,EAAQ,2BAAID,GAAL,IAAWyB,SAAST,QAKzBhB,EAAKyB,UAAY,kBAAC,EAAD,CAAYP,SAAUlB,EAAKyB,aCThCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1795a6d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"miniBlog\":\"MiniBlog_miniBlog__1zWH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"show\":\"PostItem_show__N3f4h\",\"none\":\"PostItem_none__31BLt\"};","import React, {useState} from 'react';\r\nimport styles from './PostItem.module.css';\r\n\r\ntype PostItemProps = {\r\n    title:string,\r\n    body:string,\r\n    userId:number,\r\n    onSelect:(id:number) => void\r\n}\r\n\r\nconst PostItem:React.FC<PostItemProps>  = (props) => {\r\n    const {title,body,onSelect} = {...props};\r\n    const [showBody,setShowBody] = useState(false);\r\n\r\n    const handleSelect = () => {\r\n        setShowBody(!showBody);\r\n        onSelect(props.userId)\r\n    }\r\n    return (\r\n        <li className={styles.postItem} onClick={ () => {handleSelect()}} >\r\n            <h3>{title}</h3>\r\n            <div className={ showBody ? styles.show : styles.none }>\r\n                {body}\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default PostItem \r\n ","import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/'\r\n})\r\n\r\nexport default apiClient","import {useState, useEffect} from 'react';\r\nimport apiClient from '../apiClient'\r\n\r\n interface IData {\r\n     data:[]\r\n }\r\n interface IFetching {\r\n     fetch:boolean\r\n }\r\nconst useData = (path:any):any => {\r\n    const [data,setData] = useState<IData>({data:[]})\r\n    const [isFetching,setFetching] = useState<IFetching>({fetch:false});\r\n\r\n    useEffect( () => {\r\n        setFetching({fetch:true});\r\n        apiClient.get(path).then(response => {\r\n            setData(response.data);\r\n            setFetching({fetch:false})\r\n        })\r\n    }, [path]);\r\n\r\n    return [data,isFetching]\r\n}\r\nexport default useData","import React,{useState, useEffect} from 'react';\r\nimport PostItem from './PostItem/PostItem';\r\nimport useData from '../Hooks/useData'\r\n \r\ntype PostListProps = {\r\n    onSelect:(id:number) => void\r\n}\r\n//userId\r\ninterface IPost {\r\n    id:number,\r\n    title:string,\r\n    body:string,\r\n    userId:number\r\n}\r\n\r\n\r\nconst PostList:React.FC<PostListProps> = (props) => {\r\n    const [data,isFetching] = useData('/posts');\r\n    const [list,setList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setList(data)\r\n    }, [data]) \r\n    return (  \r\n        <ul>\r\n            <h2>Post List</h2>\r\n            { list.length > 0 && list.map( (post:IPost) => {\r\n                 return <PostItem \r\n                                key={post.id}   \r\n                                title={post.title} \r\n                                body={post.body}\r\n                                userId={post.userId}\r\n                                onSelect={props.onSelect}\r\n                                /> }) }\r\n        </ul>\r\n    )\r\n}\r\n \r\nexport default PostList","import React,{useEffect,useState} from 'react';\r\nimport useData from '../Hooks/useData'\r\n\r\ntype AuthorInfoProps = {\r\n    authorId:null | number\r\n}\r\n\r\ntype AuthorInfo = {\r\n    username:string\r\n}\r\ninterface IAuthor {\r\n    name:string,\r\n    email:string,\r\n    phone:number\r\n}\r\nconst AuthorInfo:React.FC<AuthorInfoProps> = ({authorId, ...props}) => {\r\n    \r\n    const [data,isFetching] = useData(`/users/${authorId}`);\r\n    const [authorInfo,setAuthorInfo] = useState<IAuthor>({name:'',email:'',phone:0});\r\n    \r\n    \r\n    useEffect(() => {\r\n        if(data.id) {\r\n            setAuthorInfo(data)\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <div className=\"author\">\r\n            <h3>AuthorInfo</h3>\r\n            <p>Name : {authorInfo.name}</p>\r\n            <p>E-mail : {authorInfo.email}</p>\r\n            <p>Phone : {authorInfo.phone}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default AuthorInfo","import React,{useState} from 'react';\nimport PostList from './components/Posts/PostsList';\nimport AuthorInfo from './components/AuthorInfo/AuthorInfo';\nimport styles from './MiniBlog.module.css'\n\n\ninterface IData {\n  authorID:null | number\n}\n\nconst MiniBlog = () => {\n  const [data,setData] = useState<IData>({\n    authorID:null\n  });\n\n    const postSelect = (id:number):void => {\n      setData({...data, authorID:id})\n    }\n  return (\n    <div className={styles.miniBlog}>\n      <PostList onSelect={postSelect} />\n       {data.authorID && <AuthorInfo authorId={data.authorID}/> }\n    </div>\n  );\n}\n\nexport default MiniBlog;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MiniBlog from './MiniBlog';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MiniBlog />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}