{"version":3,"sources":["components/AuthorInfo/AuthorInfo.module.css","components/Posts/PostItem/PostItem.tsx","components/apiClient.js","components/Hooks/useData.tsx","components/Posts/PostsList.tsx","components/AuthorInfo/AuthorInfo.tsx","MiniBlog.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PostItem","props","title","body","postId","onSelect","useState","showBody","setShowBody","loading","setLoading","showComments","setShowComments","comments","setComments","Item","Group","Content","Header","onClick","userId","as","Description","className","length","axios","get","then","res","data","Extra","Dimmer","active","inverted","Loader","Comment","map","item","key","id","Avatar","src","Author","email","Text","Actions","Action","apiClient","create","baseURL","useData","path","setData","fetch","isFetching","setFetching","useEffect","response","PostList","list","setList","Container","post","AuthorInfo","authorId","name","phone","authorInfo","setAuthorInfo","styles","author","MiniBlog","authorID","Grid","columns","Row","Column","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f675e7de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"author\":\"AuthorInfo_author__2Y51F\"};","import React, {useState,useEffect} from 'react';\r\nimport styles from './PostItem.module.css';\r\nimport useData from '../../Hooks/useData';\r\nimport  {Dimmer,Loader, Item, Container,Comment} from 'semantic-ui-react'\r\nimport axios from 'axios';\r\n\r\ntype PostItemProps = {\r\n    postId:number,\r\n    title:string,\r\n    body:string,\r\n    userId:number,\r\n    onSelect:(id:number) => void\r\n}\r\ntype CommentType = {\r\n    id:number, \r\n    email:string,\r\n    body:string\r\n}\r\n\r\nconst PostItem:React.FC<PostItemProps>  = (props) => {\r\n    const {title,body,postId,onSelect} = {...props};\r\n    const [showBody,setShowBody] = useState(false);\r\n    const [loading,setLoading] = useState(false);\r\n    const [showComments,setShowComments] = useState(false);\r\n    const [comments,setComments] = useState([]);\r\n \r\n    const handleSelect = () => {\r\n        setShowBody(!showBody);\r\n        setLoading(true)\r\n        onSelect(props.userId);\r\n    }\r\n    const handleComments = ():void => {\r\n        if (comments.length === 0) {\r\n            setLoading(true);\r\n            axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`).\r\n        then( (res) => { \r\n            setComments(res.data);\r\n            setLoading(false);\r\n            setShowComments(true)\r\n            });\r\n        } else {\r\n            setShowComments(!showComments);\r\n        }    \r\n    }\r\n    return (\r\n        <Item.Group>\r\n            <Item>\r\n                <Item.Content>\r\n                    <Item.Header onClick={ () => {handleSelect()}} as='a'>{title}</Item.Header>\r\n                    <Item.Description className={showBody ? 'show' : ''}>\r\n                    {body}\r\n                    </Item.Description>\r\n                    <p><a onClick={() => { handleComments()} }>Comments</a></p>\r\n                    <Item.Extra className={showComments ? 'show' : ''}>\r\n                        \r\n                            <Dimmer active={loading} inverted>\r\n                                <Loader inverted>Loading...</Loader>\r\n                            </Dimmer>\r\n                            <Comment.Group>\r\n                            {comments.length > 0 && \r\n                              comments.map( (item:CommentType) => {\r\n                                  return (\r\n                                    <Comment key={item.id}>\r\n                                    <Comment.Avatar src='https://www.kindpng.com/picc/m/78-786207_user-avatar-png-user-avatar-icon-png-transparent.png' />\r\n                                    <Comment.Content>\r\n                                        <Comment.Author as='a'>{item.email}</Comment.Author>\r\n                                        <Comment.Text className={showBody ? 'show' : ''}>{item.body}</Comment.Text>\r\n                                        <Comment.Actions>\r\n                                            <Comment.Action>Reply</Comment.Action>\r\n                                        </Comment.Actions>\r\n                                    </Comment.Content>\r\n                                  </Comment>\r\n                                  )\r\n                              })\r\n                            }\r\n                            </Comment.Group>\r\n                                         \r\n                    </Item.Extra>\r\n                </Item.Content>\r\n            </Item>\r\n        </Item.Group>\r\n        // <li className={styles.postItem} onClick={ () => {handleSelect()}} >\r\n            \r\n        //     <div className={ showBody ? styles.show : styles.none }>\r\n                \r\n        //         <Dimmer active={loading === true} inverted>\r\n        //             <Loader>Loading...</Loader>\r\n        //         </Dimmer>\r\n        //         { comments.length > 0 && \r\n        //         <>\r\n        //             <ul>\r\n        //             <h3>Comments:</h3>\r\n        //             {comments.map( (comment:{name:string,body:string,id:number}) => {\r\n        //                     return <li key={comment.id}>\r\n        //                         <p>{comment.name}</p>\r\n        //                         <p>{comment.body}</p>\r\n        //                     </li>\r\n        //             } )}\r\n        //             </ul>\r\n        //         </> }\r\n        //     </div>\r\n        // </li>\r\n    )\r\n}\r\n\r\nexport default PostItem \r\n ","import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/'\r\n})\r\n\r\nexport default apiClient","import {useState, useEffect} from 'react';\r\nimport apiClient from '../apiClient'\r\n\r\n interface IData {\r\n     data:[]\r\n }\r\n interface IFetching {\r\n     fetch:boolean\r\n }\r\nconst useData = (path:any):any => {\r\n    const [data,setData] = useState<IData>({data:[]})\r\n    const [isFetching,setFetching] = useState<IFetching>({fetch:false});\r\n\r\n    useEffect( () => {\r\n        setFetching({fetch:true});\r\n        apiClient.get(path).then(response => {\r\n            setData(response.data);\r\n            setFetching({fetch:false})\r\n        })\r\n    }, [path]);\r\n\r\n    return [data,isFetching]\r\n}\r\nexport default useData","import React,{useState, useEffect} from 'react';\r\nimport PostItem from './PostItem/PostItem';\r\nimport useData from '../Hooks/useData'\r\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\r\n \r\ntype PostListProps = {\r\n    onSelect:(id:number) => void\r\n}\r\n//userId\r\ninterface IPost {\r\n    id:number,\r\n    title:string,\r\n    body:string,\r\n    userId:number\r\n}\r\n\r\n\r\nconst PostList:React.FC<PostListProps> = (props) => {\r\n    const [data,isFetching] = useData('/posts');\r\n    const [list,setList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setList(data)\r\n    }, [data,isFetching]) \r\n    return (  \r\n        <Container>\r\n           <Dimmer active={isFetching.fetch} inverted>\r\n                        <Loader >Loading</Loader>\r\n                    </Dimmer>\r\n            { list.length > 0 && \r\n            <>\r\n            <h2>Post List</h2>\r\n                {list.map( (post:IPost) => {\r\n                    return <PostItem \r\n                                    key={post.id}\r\n                                    postId={post.id}   \r\n                                    title={post.title} \r\n                                    body={post.body}\r\n                                    userId={post.userId}\r\n                                    onSelect={props.onSelect}\r\n                                    /> }) }\r\n            </>\r\n             }\r\n        </Container>\r\n    )\r\n}\r\n \r\nexport default PostList","import React,{useEffect,useState} from 'react';\r\nimport useData from '../Hooks/useData'\r\nimport {Loader,Dimmer} from 'semantic-ui-react'\r\nimport styles from './AuthorInfo.module.css'\r\n\r\ntype AuthorInfoProps = {\r\n    authorId:null | number\r\n}\r\n\r\ntype AuthorInfo = {\r\n    username:string\r\n}\r\ninterface IAuthor {\r\n    name:string,\r\n    email:string,\r\n    phone:number\r\n}\r\nconst AuthorInfo:React.FC<AuthorInfoProps> = ({authorId, ...props}) => {\r\n    \r\n    const [data,isFetching] = useData(`/users/${authorId}`);\r\n    const [authorInfo,setAuthorInfo] = useState<IAuthor>({name:'',email:'',phone:0});\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    useEffect( () => {\r\n        setLoading(true)\r\n    },[authorId]);\r\n    \r\n    useEffect(() => {\r\n        setLoading(true)\r\n        if(data.id) {\r\n            setAuthorInfo(data);\r\n            setLoading(false)\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <div className=\"author\">\r\n            <Dimmer active={loading === true} inverted>\r\n                <Loader>Loading...</Loader>\r\n            </Dimmer>\r\n            <div className={styles.author}>\r\n                <h3>AuthorInfo</h3>\r\n                <p>Name : {authorInfo.name}</p>\r\n                <p>E-mail : {authorInfo.email}</p>\r\n                <p>Phone : {authorInfo.phone}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AuthorInfo","import React,{useState} from 'react';\nimport PostList from './components/Posts/PostsList';\nimport AuthorInfo from './components/AuthorInfo/AuthorInfo';\nimport styles from './MiniBlog.module.css'\nimport {Grid} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\ninterface IData {\n  authorID:null | number\n}\n\nconst MiniBlog = () => {\n  const [data,setData] = useState<IData>({\n    authorID:null\n  });\n\nconst postSelect = (id:number):void => {\n  setData({...data, authorID:id})\n}\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row>\n          <Grid.Column>\n              <PostList onSelect={postSelect} />\n          </Grid.Column>\n          <Grid.Column>\n              {data.authorID && <AuthorInfo authorId={data.authorID}/> }\n          </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default MiniBlog;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MiniBlog from './MiniBlog';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"App\">\n       <MiniBlog />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}